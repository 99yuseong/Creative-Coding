1. wave
곡선의 움직임을 자연스럽게 보이는 법

> 위아래로 움직이는 점들을 연결해서 웨이브 처럼 보이게 할 수 있음

> 점들 자체를 연결할 경우, 변화의 폭이 크기 때문에 부자연스러울 수 있으니
점과 점 사이의 중간 점을 찍고, 그 중간점을 연결해야 연결이 자연스러워 진다.

Math.sin
ctx.quadraticCurveTo

항상 생각을 할때
점의 좌표와 스피드를 생각하면
스피드를 더해주거나 빼줌으로써 방향을 결정한다고 생각하기

2. rotate
캔버스 내의 요소를 회전 시키는 법

> 항상 캔버스의 회전 축은 원점이다.
> 그래서 회전시키고 싶은 요소가 있다면, ctx.translate로 원점을 그쪽으로 이동시키고
> ctx.rotate로 회전을 시켜야한다

중요한 점은 ctx.translate로 원점을 이동시키게 되면 
다른 요소들을 그릴때에도 영향을 줄 수 있기때문에
항상 ctx.save()로 현재 상태를 저장하고
회전시킨 후 ctx.restore()로 이전 상태를 불러와야한다


3. gradient

원에 그라디언트 효과를 주고 싶다면
const g = ctx.createRadialGradient(x,y,r,x,y,r);
g.addColorStop(0, 'rgb');
g.addColorStop(1, 'rgb');
를 통해 g 객체를 얻을 수 있고
fillStyle에 해당 객체를 전달하면 된다

겹쳐지는 요소간 색상변화가 부드럽게 나타나려면
ctx.globalCompositeOperation = 'saturation';
를 해보는 것도 좋을 것 같다.
이건 그냥 하나하나씩 적용해가면서 확인해보길 ㅎㅎ;;
명도채도색상관련은 좀 어려움